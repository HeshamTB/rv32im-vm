#!/bin/python

from argparse import ArgumentParser
from mem import Memory
from CPU import CPU
from myhdl import intbv
# TODO: check for myhdl if needed

# From memory-layout.txt
_add_text_base = 0
_add_text_limit = 0x0ffc
_add_data_base = 0x2000 # up to 2fff
#_add_data_limit = 0x2000
_add_stack_base = 0x3ffc
_add_heap_base = 0x3000

_add_global_ptr = 0x1800
print('RV32IM VM (Team 2)')
_index_sp = 2
_index_gp = 3

def main():
    files = parseArgs()['input_files']
    # Read bin/mem files
    bin_content_text = readMemFile(files[0])
    bin_content_data = readMemFile(files[1])
    print("Code size: ", len(bin_content_text))
    print("Static Data size: ", len(bin_content_data))
    # Memory size is 2 times the data and text sections for now.
    mem_size = 0x3ffc
    print("Allocated memory size ", mem_size, ' Bytes')
    # Init RAM
    RAM = Memory(mem_size)
    RAM = loadRam(RAM, bin_content_text) # Load text section
    RAM = loadRam(RAM, bin_content_data, _add_data_base) # Load data
    print("--------------------------------------")
    # Start CPU
    cpu = CPU(RAM)
    cpu.regs[_index_sp] = intbv(_add_stack_base)[32:0]
    cpu.regs[_index_gp] = intbv(_add_global_ptr)[32:0]
    while 1:
        printRegs(cpu.regs)
        print('pc = {}'.format(hex(cpu.pc)))
        cpu.fetch()
        if not cpu.jump_flag:
            cpu.pc += 4
            if cpu.pc > _add_text_limit:
                print('Program is done (reached max address')
                exit(0)

def parseArgs() -> dict:
    # TODO: Add mem allocation option
    parser = ArgumentParser()
    parser.add_argument('input_files', type=str, nargs=2)
    parsed = parser.parse_args() # Defualts to sys.argv[]
    return vars(parsed)

def printRegs(regs : list):
    counter = 0
    for i in range(len(regs)):
        for j in range(4):
            if counter+j > 31:
                print()
                return
            print('x{} = {} '.format(counter+j, regs[counter+j]), end='')
        counter += 4
        print()

def readMemFile(file_name: str) -> bytearray:
    """
    Read file as binary byte array
    """
    content = bytearray()
    with open(file_name, 'rb') as file:
        content += file.read()
    return content

def loadRam(RAM: Memory, data: bytearray, offset:int = 0) -> Memory:
    for i, val in enumerate(data):
        #print('Real address: %d With offset: %d Value: %d' % (i, i+offset, val))
        RAM.write(i+offset, bytearray()+val.to_bytes(1,'little'))
    return RAM

if __name__ == '__main__':
    exit(main())